[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Administrator\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Administrator\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Oracle Corporation Java 17.0.5)
[debug]       Load.loadUnit: plugins took 80.4679ms
[debug]       Load.loadUnit: defsScala took 0.1728ms
[debug] [Loading] Scanning directory C:\Users\Administrator\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 9.5675 ms
[debug]           Load.resolveProject(global-plugins) took 33.3689ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Administrator\.sbt\1.0\plugins, plugins: List(<none>))) took 53.9978ms
[debug] [Loading] Done in C:\Users\Administrator\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 75.8362ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1751ms
[debug]     Load.loadUnit(file:/C:/Users/Administrator/.sbt/1.0/plugins/, ...) took 162.5864ms
[debug]   Load.apply: load took 276.0103ms
[debug]   Load.apply: resolveProjects took 3.7936ms
[debug]   Load.apply: finalTransforms took 42.9115ms
[debug]   Load.apply: config.delegates took 9.5292ms
[debug]   Load.apply: Def.make(settings)... took 422.4516ms
[debug]   Load.apply: structureIndex took 97.5382ms
[debug]   Load.apply: mkStreams took 4.5608ms
[info] loading global plugins from C:\Users\Administrator\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1889.779ms
[debug]           Load.loadUnit: plugins took 20.5866ms
[debug]           Load.loadUnit: defsScala took 0.004ms
[debug] [Loading] Scanning directory C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6\project
[debug]             Load.loadUnit: mkEval took 4.8226ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.2038 ms
[info] loading settings for project untitled6-build from idea1.sbt ...
[debug]               Load.resolveProject(untitled6-build) took 1.8696ms
[debug]             Load.loadTransitive: finalizeProject(Project(id untitled6-build, base: C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6\project, plugins: List(<none>))) took 4.5738ms
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6\project, returning: (untitled6-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1896.6294ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.3179ms
[debug]         Load.loadUnit(file:/C:/Users/Administrator/Desktop/spinalhdl_coding/untitled6/project/, ...) took 1922.6222ms
[debug]       Load.apply: load took 1924.0928ms
[debug]       Load.apply: resolveProjects took 0.1006ms
[debug]       Load.apply: finalTransforms took 6.0819ms
[debug]       Load.apply: config.delegates took 0.2476ms
[debug]       Load.apply: Def.make(settings)... took 39.1296ms
[debug]       Load.apply: structureIndex took 15.5947ms
[debug]       Load.apply: mkStreams took 0.0018ms
[info] loading project definition from C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2867.4107ms
[debug]     Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6
[debug]       Load.loadUnit: mkEval took 0.4104ms
[debug] [Loading] Found root project mylib w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.8345 ms
[info] loading settings for project mylib from build.sbt ...
[debug]         Load.resolveProject(mylib) took 74.5119ms
[debug]       Load.loadTransitive: finalizeProject(Project(id mylib, base: C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6, plugins: List(<none>))) took 80.3372ms
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\untitled6, returning: (mylib)
[debug]     Load.loadUnit: loadedProjectsRaw took 1228.8817ms
[debug]     Load.loadUnit: cleanEvalClasses took 28.902ms
[debug]   Load.loadUnit(file:/C:/Users/Administrator/Desktop/spinalhdl_coding/untitled6/, ...) took 4126.3079ms
[debug] Load.apply: load took 4127.6828ms
[debug] Load.apply: resolveProjects took 0.0964ms
[debug] Load.apply: finalTransforms took 33.6507ms
[debug] Load.apply: config.delegates took 0.2258ms
[debug] Load.apply: Def.make(settings)... took 45.3123ms
[debug] Load.apply: structureIndex took 15.3788ms
[debug] Load.apply: mkStreams took 0.0038ms
[info] set current project to SpinalTemplateSbt (in build file:/C:/Users/Administrator/Desktop/spinalhdl_coding/untitled6/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51654 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51654, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SpinalTemplateSbt (in build file:/C:/Users/Administrator/Desktop/spinalhdl_coding/untitled6/)
[debug] > Exec(idea-shell, None, None)
