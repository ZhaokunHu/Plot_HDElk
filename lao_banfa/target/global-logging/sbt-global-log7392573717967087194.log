[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Administrator\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Administrator\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.0 (Oracle Corporation Java 19)
[debug]       Load.loadUnit: plugins took 53.166ms
[debug]       Load.loadUnit: defsScala took 0.1346ms
[debug] [Loading] Scanning directory C:\Users\Administrator\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.2162 ms
[debug]           Load.resolveProject(global-plugins) took 31.3901ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Administrator\.sbt\1.0\plugins, plugins: List(<none>))) took 50.929ms
[debug] [Loading] Done in C:\Users\Administrator\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 62.8867ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.142ms
[debug]     Load.loadUnit(file:/C:/Users/Administrator/.sbt/1.0/plugins/, ...) took 121.6911ms
[debug]   Load.apply: load took 229.6413ms
[debug]   Load.apply: resolveProjects took 3.1101ms
[debug]   Load.apply: finalTransforms took 51.9859ms
[debug]   Load.apply: config.delegates took 9.7143ms
[debug]   Load.apply: Def.make(settings)... took 371.0142ms
[debug]   Load.apply: structureIndex took 100.9777ms
[debug]   Load.apply: mkStreams took 3.8854ms
[info] loading global plugins from C:\Users\Administrator\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1954.5127ms
[debug]           Load.loadUnit: plugins took 19.9415ms
[debug]           Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa\project
[debug]             Load.loadUnit: mkEval took 2.7533ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.3062 ms
[info] loading settings for project lao_banfa-build from idea2.sbt ...
[debug]               Load.resolveProject(lao_banfa-build) took 5.9053ms
[debug]             Load.loadTransitive: finalizeProject(Project(id lao_banfa-build, base: C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa\project, plugins: List(<none>))) took 8.7758ms
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa\project, returning: (lao_banfa-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1871.2054ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.1402ms
[debug]         Load.loadUnit(file:/C:/Users/Administrator/Desktop/spinalhdl_coding/lao_banfa/project/, ...) took 1900.3382ms
[debug]       Load.apply: load took 1901.6213ms
[debug]       Load.apply: resolveProjects took 0.0685ms
[debug]       Load.apply: finalTransforms took 6.0465ms
[debug]       Load.apply: config.delegates took 0.2742ms
[debug]       Load.apply: Def.make(settings)... took 42.4461ms
[debug]       Load.apply: structureIndex took 16.6197ms
[debug]       Load.apply: mkStreams took 0.0016ms
[info] loading project definition from C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4539.2553ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa
[debug]       Load.loadUnit: mkEval took 0.3672ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.3326 ms
[info] loading settings for project lao_banfa from build.sbt ...
[debug]         Load.resolveProject(lao_banfa) took 61.0633ms
[debug]       Load.loadTransitive: finalizeProject(Project(id lao_banfa, base: C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa, plugins: List(<none>))) took 64.9645ms
[debug] [Loading] Done in C:\Users\Administrator\Desktop\spinalhdl_coding\lao_banfa, returning: (lao_banfa)
[debug]     Load.loadUnit: loadedProjectsRaw took 665.8652ms
[debug]     Load.loadUnit: cleanEvalClasses took 11.9157ms
[debug]   Load.loadUnit(file:/C:/Users/Administrator/Desktop/spinalhdl_coding/lao_banfa/, ...) took 5218.0291ms
[debug] Load.apply: load took 5219.3958ms
[debug] Load.apply: resolveProjects took 0.1114ms
[debug] Load.apply: finalTransforms took 26.8486ms
[debug] Load.apply: config.delegates took 0.2259ms
[debug] Load.apply: Def.make(settings)... took 40.8705ms
[debug] Load.apply: structureIndex took 13.6774ms
[debug] Load.apply: mkStreams took 0.0015ms
[info] set current project to lao_banfa (in build file:/C:/Users/Administrator/Desktop/spinalhdl_coding/lao_banfa/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51654 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51654, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to lao_banfa (in build file:/C:/Users/Administrator/Desktop/spinalhdl_coding/lao_banfa/)
[debug] > Exec(idea-shell, None, None)
